# GNdb Development Task Runner
# Install just: https://github.com/casey/just

# List all available commands
default:
    @just --list

# Build the gndb binary
build:
    go build -o gndb cmd/gndb/main.go

# Build with version info
build-release version:
    go build -ldflags "-X main.version={{version}}" -o gndb cmd/gndb/main.go

# Run all tests
test:
    go test ./...

# Run tests with coverage report
test-coverage:
    go test -coverprofile=coverage.out ./...
    go tool cover -html=coverage.out -o coverage.html
    @echo "Coverage report: coverage.html"

# Run tests with race detector
test-race:
    go test -race ./...

# Run linters
lint:
    go vet ./...
    golangci-lint run

# Format code
fmt:
    go fmt ./...
    gofmt -s -w .

# Tidy dependencies
tidy:
    go mod tidy
    go mod verify

# Install development tools
install-tools:
    go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
    curl -sSf https://atlasgo.io/install.sh | sh

# Generate Atlas migration
migrate-generate name:
    atlas migrate diff {{name}} \
      --dir "file://migrations" \
      --to "file://schema.hcl" \
      --dev-url "docker://postgres/15/dev"

# Apply migrations to database
migrate-apply url:
    atlas migrate apply \
      --url "{{url}}" \
      --dir "file://migrations"

# Check migration status
migrate-status url:
    atlas migrate status \
      --url "{{url}}" \
      --dir "file://migrations"

# Validate migration integrity
migrate-validate:
    atlas migrate validate --dir "file://migrations"

# Start local PostgreSQL container
db-start:
    docker run --name gndb-postgres \
      -e POSTGRES_PASSWORD=gndb \
      -e POSTGRES_USER=gndb \
      -e POSTGRES_DB=gndb \
      -p 5432:5432 \
      -d postgres:15-alpine

# Stop PostgreSQL container
db-stop:
    docker stop gndb-postgres
    docker rm gndb-postgres

# Create test database
db-create-test:
    createdb gndb_test || echo "Database already exists"

# Drop test database
db-drop-test:
    dropdb --if-exists gndb_test

# Run complete quickstart workflow
quickstart: build db-create-test
    @echo "==> Creating schema..."
    ./gndb create --url "postgres://localhost:5432/gndb_test?sslmode=disable"
    @echo "\n==> Populating data..."
    ./gndb populate --url "postgres://localhost:5432/gndb_test?sslmode=disable" \
      --sfga testdata/sample.sfga
    @echo "\n==> Optimizing database..."
    ./gndb restructure --url "postgres://localhost:5432/gndb_test?sslmode=disable"
    @echo "\n==> Quickstart complete! Database ready at gndb_test"

# Run quickstart and measure performance
quickstart-benchmark: quickstart
    @echo "\n==> Running performance tests..."
    psql gndb_test -c "\timing on" \
      -c "SELECT COUNT(*) FROM name_strings;" \
      -c "SELECT * FROM name_strings WHERE name = 'Homo sapiens' LIMIT 1;"

# Clean all build artifacts and test databases
clean:
    rm -f gndb
    rm -f coverage.out coverage.html
    dropdb --if-exists gndb_test

# Run CI checks (what CI will run)
ci: lint test build
    @echo "All CI checks passed!"

# Prepare for release
release version: clean
    @echo "Building release {{version}}..."
    just build-release {{version}}
    ./gndb --version
    @echo "Release binary ready: ./gndb"

# Watch and run tests on file changes (requires entr)
watch:
    ls **/*.go | entr -c just test

# Generate Go documentation server
doc:
    @echo "Starting documentation server at http://localhost:6060"
    godoc -http=:6060

# Run Atlas schema inspection
schema-inspect url:
    atlas schema inspect \
      --url "{{url}}" \
      --format "{{ sql . }}"

# Dump schema to HCL
schema-dump url:
    atlas schema inspect \
      --url "{{url}}" \
      > schema.hcl
    @echo "Schema dumped to schema.hcl"

# Create sample SFGA for testing
create-sample-sfga:
    @echo "Creating sample SFGA file..."
    # TODO: Implement sample SFGA generator
    @echo "Sample SFGA: testdata/sample.sfga"

# Run database queries for debugging
db-query url query:
    psql "{{url}}" -c "{{query}}"

# Show database table sizes
db-sizes url:
    psql "{{url}}" -c "\
      SELECT \
        tablename, \
        pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) AS size \
      FROM pg_tables \
      WHERE schemaname = 'public' \
      ORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC;"

# Show index usage statistics
db-index-stats url:
    psql "{{url}}" -c "\
      SELECT \
        schemaname, tablename, indexname, \
        idx_scan, idx_tup_read, idx_tup_fetch \
      FROM pg_stat_user_indexes \
      WHERE schemaname = 'public' \
      ORDER BY idx_scan DESC \
      LIMIT 20;"
